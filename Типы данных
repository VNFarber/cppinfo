# Типы данных

### Тип void

Тип с пустым набором значений. Это неполный тип, объекты типа void запрещены. Разрешены [функции](https://www.notion.so/5825764894aa4ac4a8a746cf354e23ac?pvs=21) с возвращаемым типом void и [указатели](https://www.notion.so/034cfaa5797845f69b6da9357d514610?pvs=21) на void - std::nullptr_t

### Integral types (целочисленные типы)

Int - базовый целочисленный тип. Модификаторы могут менять его знаковость и размер. Размер - 16 или 32 бита в зависимости от архитектуры компьютера). Диапазон предельных значений соответственно также может варьироваться от –32768 до 32767 (при 2 байтах) или от −2 147 483 648 до 2 147 483 647 (при 4 байтах). Но в любом случае размер должен быть больше или равен размеру типа short и меньше или равен размеру типа long.

Как и для всех спецификаторов типов, разрешен любой порядок:
unsigned long long int
long int unsigned long

### Bool (логический тип)

bool - содержит одно из двух значений: true или false (любое число кроме нуля/0)

### Char (символьный тип)

Char - тип для представления символов, запись производится в одинарных кавычках ‘s’, 1 байт. Можно модифицировать знаковость.
Если мы используем chars для хранения [ASCII](https://teachingbee.in/blog/ascii-table-in-cpp/) символов, знаковость уточнять не нужно, однако, если мы храним маленькие целочисленные значения, это может иметь смысл для оптимизации.

Если мы хотим работать с символами языков, отличных от английского, 256-символьных кодов может быть недостаточно, в этом случае применяется Unicode
wchar_t  узнать про этот и типы данных ниже можно [здесь](https://www.learncpp.com/cpp-tutorial/chars/#:~:text=What%20about%20the%20other%20char%20types%2C%20wchar_t%2C%20char8_t%2C%20char16_t%2C%20and%20char32_t%3F) и [здесь](https://en.cppreference.com/w/cpp/language/types#:~:text=are%20typically%20signed.-,wchar_t,-%E2%80%94%20type%20for%20wide)
char8_t  
char16_t
char32_t

### Float и double (типы с плавающей запятой)

float - от 6 до 9 знаков
double - от 15 до 18 знаков
long double - около 15, 18, или даже 35 знаков

### Типы с фиксированной шириной

Нам гарантируется только минимальный размер типов, они могут быть больше. Если нам нужен точный размер, необходимо указывать это явно.
std::int8_t  1 байт знаковый
std::uint8_t 1 байт беззнаковый
std::int16_t и т.д…
std::uint16_t
std::int32_t
std::uint32_t
std::int64_t
std::uint64_t
std::byte - реализация концепции байта для манипуляции с данными на уровне байтов

### std::size_t

Используется для представления размера длины объекта.
sizeof() возвращает тип std::size_t. Так же используется для индексации массивов и счетчиков цикла

## Классовые типы

### std::string

Тип для хранения строк. std::string не обладает достаточным кол-вом памяти для хранения строки. Оно будет запрашивать дополнительную память, используя динамическую память. Возможность получать дополнительную память во время рантайма - то, что делает std::string таким гибким, но в то же время сравнимо медленным.

Узнать больше про std::string можно [тут](https://en.cppreference.com/w/cpp/string/basic_string)

### std::string_view

Предоставляет доступ к уже существующей строке (без создания копии) в формате “только для чтения”, изменять строку нельзя. Помогает решить проблему дорогой инициализации и копирования std::string. Следует отдаватель предпочтение std::string_view вместо std::string, когда нам не требуется изменять строку, например, когда нам нужно передать строку в функцию, в теле которой сама строка не будет изменяться.

### std::vector

Динамический массив, который содержит коллекцию объектов одного типа

### std::list

Двусвязный список

### std::forward_list

Односвязный список

### std::deque

Двусторонняя очередь (аналогично вектору, но может докладывать элементы и в начало, и в конец)

### std::stack

Стэк

### std::queue

Очередь

### std::priority_queue

Куча?

## Ассоциативные контейнеры

### std::map

`std::map<std::string, int>`

Хранит пару ключ/значение и возвращает значение по ключу. Хранит элементы в порядке возрастания. Не умеет хранить несколько элементов с одинаковым ключом

### std::multimap

Умеет хранить несколько элементов с одинаковым ключом

### std::unordered_map

Хранит пары неупорядоченно, но поиск, вставка и удаление работают в среднем за O(1). Изнутри это hash таблица

### std::set

Как std::map, только хранятся просто значения (так же упорядочено)
